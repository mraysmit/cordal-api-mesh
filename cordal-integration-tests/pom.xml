<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>dev.cordal</groupId>
        <artifactId>cordal</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>cordal-integration-tests</artifactId>
    <packaging>jar</packaging>

    <name>CORDAL Integration Tests</name>
    <description>
        Comprehensive integration tests between CORDAL Generic API Service and Metrics Service.
        This module contains only test code and produces no deployable artifacts.
    </description>

    <dependencies>
        <!-- Common Library -->
        <dependency>
            <groupId>dev.cordal</groupId>
            <artifactId>cordal-common-library</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <!-- Module Dependencies -->
        <dependency>
            <groupId>dev.cordal</groupId>
            <artifactId>cordal-api-service</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>dev.cordal</groupId>
            <artifactId>cordal-metrics-service</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>

        <!-- HTTP Client for inter-service communication -->
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.12.0</version>
        </dependency>

        <!-- Jackson already provided by common-library through module dependencies -->

        <!-- Test Dependencies -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-suite</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
            <exclusions>
                <!-- Exclude old hamcrest-core to avoid split package issues -->
                <exclusion>
                    <groupId>org.hamcrest</groupId>
                    <artifactId>hamcrest-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <version>1.19.8</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.javalin</groupId>
            <artifactId>javalin-testtools</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Awaitility for async testing -->
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <version>4.2.0</version>
            <scope>test</scope>
            <exclusions>
                <!-- Exclude hamcrest to use a single consistent version -->
                <exclusion>
                    <groupId>org.hamcrest</groupId>
                    <artifactId>hamcrest</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Single consistent Hamcrest version to resolve split package issues -->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <version>2.2</version>
            <scope>test</scope>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <!-- Use classpath instead of module path for integration tests -->
                    <useModulePath>false</useModulePath>
                </configuration>
            </plugin>

            <!--
                JAR Plugin Configuration for Integration Tests Module

                This module contains only test code (src/test/) and no main source code (src/main/).
                Maven will create an empty JAR and warn "JAR will be empty - no content was marked for inclusion!"
                This is expected and normal for integration test modules that don't produce deployable artifacts.

                We configure skipIfEmpty=true to suppress the warning since the empty JAR is intentional.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.4.1</version>
                <configuration>
                    <skipIfEmpty>true</skipIfEmpty>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <includes>
                        <include>**/*IntegrationTest.java</include>
                        <include>**/*IT.java</include>
                    </includes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>3.1.2</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <mainClass>dev.cordal.integration.SystemBootstrapDemo</mainClass>
                </configuration>
            </plugin>

            <!-- Skip install phase since this module produces no deployable artifacts -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <version>3.1.2</version>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
