# Generic API Service Configuration

application:
  name: cordal-api-service

server:
  host: localhost
  port: 8080

database:
  # File-based mode with AUTO_SERVER (recommended for single application)
  url: jdbc:h2:../data/api-service-config;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1
  # TCP server mode (use only if you need external connections)
  # url: jdbc:h2:tcp://localhost:9092/./data/api-service-config;DB_CLOSE_DELAY=-1
  username: sa
  password: ""
  driver: org.h2.Driver
  createIfMissing: true  # Create database if it doesn't exist

swagger:
  enabled: true
  path: /swagger

# Cache configuration
cache:
  enabled: true
  defaultTtlSeconds: 300  # 5 minutes default TTL
  maxSize: 1000  # Maximum number of entries per cache
  cleanupIntervalSeconds: 60  # Cleanup interval in seconds

# Configuration source and directory scanning
config:
  source: yaml  # Options: yaml, database
  # Load configuration data from YAML files into database (only when source is database)
  loadFromYaml: false  # Set to true to populate database from YAML files on startup

  # Directories to scan for configuration files
  # Multiple paths to support both IDE execution (from project root) and command-line execution (from cordal-api-service directory)
  directories:
    - "generic-config"        # For IDE execution from project root
    - "../generic-config"     # For command-line execution from cordal-api-service directory

  # Naming patterns for configuration files
  patterns:
    databases: ["*-database.yml", "*-databases.yml"]
    queries: ["*-query.yml", "*-queries.yml"]
    endpoints: ["*-endpoint.yml", "*-endpoints.yml", "*-api.yml"]

  # Hot reload configuration
  hotReload:
    enabled: false  # Set to true to enable hot reload functionality
    watchDirectories: true  # Monitor configuration directories for file changes
    debounceMs: 300  # Debounce delay in milliseconds to prevent reload storms
    maxReloadAttempts: 3  # Maximum number of reload attempts before giving up
    rollbackOnFailure: true  # Automatically rollback to previous configuration on failure
    validateBeforeApply: true  # Validate configuration changes before applying them

  fileWatcher:
    enabled: true  # Enable file system monitoring
    pollInterval: 1000  # Fallback polling interval for systems without native file watching
    includeSubdirectories: false  # Monitor subdirectories (not recommended for performance)

# Configuration validation settings
validation:
  # Run validation during normal application startup
  runOnStartup: true  # Set to true to validate configurations on every startup
  # Run only validation and exit (for standalone configuration checking)
  validateOnly: false  # Set to true to run validation checks and exit without starting server
  # Include endpoint connectivity testing in validation
  validateEndpoints: false  # Set to false to skip HTTP endpoint testing during validation
